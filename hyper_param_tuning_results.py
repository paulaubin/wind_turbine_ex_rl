#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Created By  : Paul Aubin
# Created Date: 2022/20/07
# version ='1.0'
# header reference : https://www.delftstack.com/howto/python/common-header-python/
# ---------------------------------------------------------------------------
""" Search of optimal parameters for the wind turbine agent """

import pandas as pd
import numpy as np

results_3_4 = {
	'actor_ss'  	: [2**s for s in 	[-2, -2, -2, -2, \
										 -2, -2, -2, -2, \
										 -2, -2, -2, -2, \
										 -2, -2, -2, -2, \
										 -3, -3, -3, -3, \
										 -3, -3, -3, -3, \
										 -3, -3, -3, -3, \
										 -3, -3, -3, -3, \
										 -4, -4, -4, -4, \
										 -4, -4, -4, -4, \
										 -4, -4, -4, -4, \
										 -4, -4, -4, -4, \
										 -5, -5, -5, -5, \
										 -5, -5, -5, -5, \
										 -5, -5, -5, -5, \
										 -5, -5, -5, -5]],
	'critic_ss' 	: [2**s for s in 	[-1, -1, -1, -1, \
										 -2, -2, -2, -2, \
										 -3, -3, -3, -3, \
										 -0, -0, -0, -0, \
										 -1, -1, -1, -1, \
										 -2, -2, -2, -2, \
										 -3, -3, -3, -3, \
										 -0, -0, -0, -0, \
										 -1, -1, -1, -1, \
										 -2, -2, -2, -2, \
										 -3, -3, -3, -3, \
										 -0, -0, -0, -0, \
										 -1, -1, -1, -1, \
										 -2, -2, -2, -2, \
										 -3, -3, -3, -3, \
										 -0, -0, -0, -0]],
	'avg_reward_ss' : [2**s for s in 	[-2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5, \
										 -2, -3, -4, -5]],
	'action_quality': 					[90, 80, 60, 30, \
										 90, 90, 70, 40, \
										 90, 80, 70, 40, \
										 80, 90, 90, 80, \
										 90, 90, 70, 50, \
										 70, 70, 70, 30, \
										 70, 50, 50, 40, \
										 80, 90, 90, 80, \
										 60, 50, 50, 00, \
										 60, 60, 60, 50, \
										 70, 50, 40, 40, \
										 70, 80, 90, 00, \
										 50, 50, 50, 60, \
										 40, 40, 50, 50, \
										 40, 40, 50, 50, \
										 40, 20, 60, 20],
	'value_quality' :					[90, 70, 50, 30, \
										 80, 85, 60, 10, \
										 70, 60, 50, 10, \
										 70, 80, 90, 80, \
										 80, 70, 50, 10, \
										 50, 40, 60, 20, \
										 60, 40, 30, 40, \
										 80, 80, 80, 70, \
										 50, 40, 70, 00, \
										 50, 60, 50, 60, \
										 50, 40, 40, 40, \
										 80, 80, 70, 20, \
										 40, 50, 50, 50, \
										 20, 30, 20, 30, \
										 40, 30, 40, 40, \
										 70, 10, 70, 20],
	'reward_quality':					[90, 70, 40, 40, \
										 90, 80, 50, 20, \
										 90, 80, 70, 10, \
										 80, 90, 90, 80, \
										 70, 70, 60, 10, \
										 80, 60, 60, 20, \
										 80, 60, 50, 40, \
										 80, 90, 90, 90, \
										 70, 40, 70, 00, \
										 50, 50, 50, 60, \
										 60, 50, 50, 40, \
										 60, 70, 70, 00, \
										 60, 50, 40, 70, \
										 60, 40, 50, 40, \
										 60, 60, 50, 30, \
										 60, 10, 70, 50],
	'angle_quality' :					[80, 60, 30, 30, \
										 90, 80, 50, 20, \
										 90, 80, 70, 20, \
										 80, 90, 90, 60, \
										 70, 70, 50, 10, \
										 80, 60, 70, 20, \
										 80, 60, 60, 30, \
										 80, 90, 90, 70, \
										 70, 30, 70, 00, \
										 60, 50, 50, 60, \
										 70, 50, 40, 40, \
										 60, 70, 70, 00, \
										 70, 50, 40, 70, \
										 60, 40, 50, 40, \
										 50, 50, 40, 20, \
										 60, 10, 70, 40]
}
'''
dfr_3_4 = pd.DataFrame(data = results_3_4)
dfr_3_4['quality'] = dfr_3_4[['action_quality', 'value_quality', 'reward_quality', 'angle_quality']].min(axis=1)

print(dfr_3_4)
print('==========================================================================================================================================================')
print(dfr_3_4[dfr_3_4['quality'] >= 70])
'''
'''[2**s for s in [-5,          -4,    -3,   -2,  -1, 0])]
Out[52]:          [0.03125, 0.0625, 0.125, 0.25, 0.5, 1]

The winner is : [actor_ss = 2**(-2), cricit_ss = 2**(-0), avg_reward_ss = 2**(-3)'''


results_5 = {
	'actor_ss'  	: [2**s for s in 	[-1, -1, -1, \
										 -1, -1, -1, \
										 -1, -1, -1, \
										 -2, -2, -2, \
										 -2, -2, -2, \
										 -2, -2, -2, \
										 -3, -3, -3, \
										 -3, -3, -3, \
										 -3, -3, -3]],
	'critic_ss' 	: [2**s for s in 	[-1, -1, -1, \
										 -0, -0, -0, \
										 +1, +1, +1, \
										 -1, -1, -1, \
										 -0, -0, -0, \
										 +1, +1, +1, \
										 -1, -1, -1, \
										 -0, -0, -0, \
										 +1, +1, +1]],
	'avg_reward_ss' : [2**s for s in 	[-2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4, \
										 -2, -3, -4]],
	'action_quality': 					[80, 90, 30, \
										 90, 80, 90, \
										 80, 90, 70, \
										 80, 70, 40, \
										 80, 90, 90, \
										 80, 80, 90, \
										 80, 80, 00, \
										 70, 80, 90, \
										 80, 90, 90],
	'value_quality' :					[60, 70, 20, \
										 70, 70, 70, \
										 70, 70, 70, \
										 80, 50, 30, \
										 70, 80, 80, \
										 70, 70, 70, \
										 80, 80, 00, \
										 90, 80, 80, \
										 90, 90, 90],
	'reward_quality':					[90, 90, 10, \
										 90, 90, 90, \
										 90, 90, 80, \
										 80, 50, 30, \
										 80, 90, 90, \
										 90, 90, 90, \
										 80, 80, 00, \
										 80, 90, 90, \
										 80, 90, 90],
	'angle_quality' :					[90, 90, 00, \
										 90, 90, 90, \
										 90, 90, 70, \
										 80, 50, 30, \
										 80, 90, 90, \
										 90, 90, 90, \
										 80, 80, 00, \
										 80, 90, 90, \
										 80, 90, 90],
	'score' 		: 					[0.0012, 0.0011, 2.0396, \
										 0.0014, 0.0009, 0.0014, \
										 0.0013, 0.0010, 0.0143, \
										 0.0041, 0.4413, 1.8983, \
										 0.0041, 0.0017, 0.0014, \
										 0.0025, 0.0019, 0.0021, \
										 0.0133, 0.0049, 3.5195, \
										 0.0101, 0.0032, 0.0027, \
										 0.0104, 0.0032, 0.0040]
}

dfr_5 = pd.DataFrame(data = results_5)
dfr_5['quality'] = dfr_5[['action_quality', 'value_quality', 'reward_quality', 'angle_quality']].min(axis=1)

print(dfr_5)
print('==========================================================================================================================================================')
print(dfr_5[dfr_5['quality'] >= 80])

'''The winner is : [actor_ss = 2**(-3), cricit_ss = 2**(1), avg_reward_ss = 2**(-3)'''